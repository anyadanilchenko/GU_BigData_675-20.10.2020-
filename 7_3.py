# Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий
# количеству ячеек клетки (целое число). В классе должны быть реализованы методы перегрузки
# арифметических операторов: сложение (__add__()), вычитание (__sub_()), умножение (__mul__()),
# деление (__truediv__()). Данные методы должны применяться только к клеткам и выполнять
# увеличение, уменьшение, умножение и целочисленное (с округлением до целого) деление клеток,
# соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме
# ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества
# ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение
# количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное
# деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество
# ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно
# переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод
# make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order()
# вернет строку: *****\n*****\n*****.

class Cell:
    def __init__(self, piece):
        self.piece = int(piece)

    def __add__(self, two):
        return f'Объединение двух клеток: {self.piece + two.piece} ячеек'

    def __sub__(self, two):
        if int(self.piece - two.piece) > 0:
            return f'Результат вычитания: {self.piece - two.piece} ячеек'
        else:
            return f'Результат отрицательный, вычитание невозможно!'

    def __mul__(self, two):
        return f'Результат умножения: {self.piece * two.piece} ячеек'

    def __truediv__(self, two):
        return f'Результат деления: {self.piece // two.piece} ячеек'

    def make_order(self):
        while self.piece//5 != 0:
            print("*" * 5)
            self.piece = self.piece - 5
        print("*" * (self.piece % 5))


cell = Cell(12)
cell_2 = Cell(6)
print(cell + cell_2)
print(cell - cell_2)
print(cell / cell_2)
print(cell * cell_2)
cell.make_order()
